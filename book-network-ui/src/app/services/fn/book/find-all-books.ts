/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { PageResponseBookResponse } from '../../models/page-response-book-response';

export interface FindAllBooks$Params {
  page?: number;
  size?: number;
  location?: string;
  lat?: number;
  lng?: number;
  radius?: number;
  search?: string;
  categoryId?: number;
}

export function findAllBooks(http: HttpClient, rootUrl: string, params?: FindAllBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBookResponse>> {
  const rb = new RequestBuilder(rootUrl, findAllBooks.PATH, 'get');
  if (params) {
    rb.query('page', params.page, {});
    rb.query('size', params.size, {});
    if (params.location) {
      rb.query('location', params.location, {});
    }
    if (params.lat !== undefined && params.lng !== undefined) {
      rb.query('lat', params.lat, {});
      rb.query('lng', params.lng, {});
      if (params.radius !== undefined) {
        rb.query('radius', params.radius, {});
      }
    }
    if (params.search) {
      rb.query('search', params.search, {});
    }
    if (params.categoryId) {
      rb.query('categoryId', params.categoryId, {});
    }
  }

  return http.request(
    rb.build({ responseType: 'json', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<PageResponseBookResponse>;
    })
  );
}

findAllBooks.PATH = '/books';
